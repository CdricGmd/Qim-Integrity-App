{"name":"Qim App","tagline":"A library and an Android application for invisible content integrity watermarking","body":"This repository represents my final-year major project in Telecom SudParis 'High Tech Imaging'.\r\n\r\nThe project is pubished under The MIT License (MIT)\r\n> Copyright (c) 2014 Cédric Golmard, Institut Mines – Telecom ; Telecom SudParis as part of HighTech Imaging major\r\n\r\nThe subject was proposed by Mihai Mitrea and Marwen Hasnaoui, researchers at [Institut Mines – Telecom ; ARTEMIS](http://artemis.telecom-sudparis.eu/).\r\n\r\nThe application received the Jury's favorite app price at CodeFest Challenge Intel 2014.\r\n***\r\n\r\n## Objectives\r\n\r\nThe main objective is to implement a technique asserting that the content of an image has not been modified (Integrity), with constraints: \r\n\r\n- Watermarking: insert a message, detect and decide if the content has been modified.\r\n- Transparency: the insertion must be transparent (according to human eyes)\r\n- Robustness: the message must be recoverable if the image has been requantized\r\n- Weakness: the decision must detect modification on the content (objects, shapes, ...) of the image\r\n\r\nThe watermarking is based on QIM and ST-DM techniques to insert signature in the image based on its content.\r\n\r\n## Watermaking library\r\n\r\nThe Watermarking library (C/C++) uses and requires [OpenCV library (under BSD License)](http://opencv.org) for image processing. It provides functions for:\r\n\r\n- signature generation based on image content\r\n- image watermaking insertion and detection\r\n- integrity checking comparing detected and computed signatures\r\n- similarity measures (PSNR, SSIM, IF, NCC)\r\n\r\nThe signature insertion generate a \"key file\", which is needed for the detection.\r\n\r\n## Android Application : Qim App\r\n\r\n_Protect the content of you images with an invisible watermarking solution_\r\n\r\nQim App allows to check if the content of an image has been modified. An invisible \"mark\" is inserted in the image and a \"key\" file is generated. The inserted mark does not alter the appearance of the image. The Check function use the key file to assert if a marked image has been modified.\r\n\r\nQim App is available on [Google Play](https://play.google.com/store/apps/details?id=com.cdricgmd.qimnavigationapp) for free.\r\n\r\n**Technical challenges** (as part of Télécom SudParis HighTech Imaging major):\r\n\r\n- use a native library in Android : The Android application uses the QimWatermaking native library (through JNI) to enable marking and integrity checking of images. Moreover it is an example of native code re-usage following a write-once strategy.\r\n- demonstrate and evaluate performances of the library on lightweight devices\r\n- give access to the library features _via_ an easy and confortable user experience\r\n\r\n**Features** : \r\n\r\n- mark an image loaded from the Image Library\r\n- mark an image taken with the camera\r\n- share the marked image and the key file\r\n- check the integrity given an image loaded from the Image Library and a key file loaded from the device's storage\r\n  - it gives an \"integrity score\" between 0.0 and 1.0\r\n  - a score over 0.9 assert that the content has not been modifies\r\n  - a score under 0.7 asser that the integrity has been broken\r\n  - intermediate scores depend on image and attacks on content / format.\r\n  \r\n**How to mark an image ?**\r\n1. On the instructions screen open an image from the library (memory card icon) or take a picture with the camera (camera icon).\r\n2. Then, swipe to the \"Mark\" panel and click to insert a mark in the image and generate the key file.\r\n3. Once process is done, insertion time and similarity measures (PSNR, SSIM) are displayed.\r\n4. You can share the marked image and the key file in the application via the <i>share</i> button;\r\n\r\n**How to check if a marked image has been modified ?**\r\n1. On the instructions screen load a marked image from the library (memory card icon) and a key file (key icon).\r\n2. Then, swipe to the \"Check\" panel and click to launch the process.\r\n3. The detection algorithm returns a score between 0 and 1 : over 0.90 we consider that the content integrity has not been broken, under 0.80 we can say that the content has been modified.\r\n\r\n**NB:** the marked images are stored in \"Pictures/IntegrityApp\" and the key files are stores in \"Download/IntegrityApp\".\r\n\r\n**Requirements**\r\n- Qim App needs [OpenCV Manager](https://play.google.com/store/apps/details?id=org.opencv.engine), free on Google Play.\r\n- Loading a key file stored on the terminal may require a [file manager application](https://play.google.com/store/search?q=file%20manager&c=apps), like OI File Manager, free on Google Play.\r\n\r\n**Screenshots:**\r\n\r\n_Instructions_\r\n\r\n![Instructions](https://raw.github.com/CdricGmd/Qim-Integrity-App/master/Images/Instructions.png)\r\n\r\n_Mark Integrity_\r\n\r\n![Mark processing](https://raw.github.com/CdricGmd/Qim-Integrity-App/master/Images/mark_processing.png)\r\n![Mark done](https://github.com/CdricGmd/Qim-Integrity-App/blob/master/Images/mark_done.png)\r\n\r\n_Check Integrity_\r\n\r\n![Check done with original picture](https://raw.github.com/CdricGmd/Qim-Integrity-App/master/Images/check_done_original.png)\r\n![Check done with hacked image](https://raw.github.com/CdricGmd/Qim-Integrity-App/master/Images/check_done_hacked.png)\r\n\r\n***\r\n\r\nThis application was developped for scientific and academic purposes, is proposed \"as is\" without result warranty.\r\n\r\nThe source code (under MIT license) and technical aspects are availales on GitHub http://cdricgmd.github.io/Qim-Integrity-App .\r\n\r\nApplication developped as part of HighTech Imaging majot at Télécom SudParis, Institut Mines - Télécom.\r\n\r\n  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}