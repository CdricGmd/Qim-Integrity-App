{"name":"Qim-integrity-app","tagline":"A library and an Android application for invisible content integrity watermarking","body":"# Qim-Integrity-App\r\nA library and an Android application for content integrity watermarking.\r\n\r\n-----\r\nThis repository represents my final-year major project in Telecom SudParis 'High Tech Imaging'.\r\n\r\nThe project is pubished under The MIT License (MIT)\r\n> Copyright (c) 2014 Cédric Golmard, Institut Mines – Telecom ; Telecom SudParis as part of HighTech Imaging major\r\n\r\nThe subject was proposed by Mihai Mitrea and Marwen Hasnaoui, researchers at [Institut Mines – Telecom ; ARTEMIS](http://artemis.telecom-sudparis.eu/).\r\n\r\n-----\r\n## Folder structure\r\n \r\n - `QimWatermarking`: Watermarking library (C/C++) and command-line tool implementing the watermarking (insertion/extraction) algorithms\r\n - `TestsOnImageFolder`: Applescript for automated tests on images: watermaking transparency and robustness\r\n - `QimNavigationApp`: Android application project for image watermarking using the native library\r\n - `Images`: Screenshots\r\n \r\n## Objectives\r\n\r\nThe main objective is to implement a technique asserting that the content of an image has not been modified (Integrity), with constraints: \r\n\r\n- Watermarking: insert a message, detect and decide if the content has been modified.\r\n- Transparency: the insertion must be transparent (according to human eyes)\r\n- Robustness: the message must be recoverable if the image has been requantized\r\n- Weakness: the decision must detect modification on the content (objects, shapes, ...) of the image\r\n\r\nThe watermarking is based on QIM and ST-DM techniques to insert signature in the image based on its content.\r\n\r\n## Watermaking library\r\n\r\nThe Watermarking library (C/C++) uses and requires [OpenCV library (under BSD License)](http://opencv.org) for image processing. It provides functions for:\r\n\r\n- signature generation based on image content\r\n- image watermaking insertion and detection\r\n- integrity checking comparing detected and computed signatures\r\n- similarity measures (PSNR, SSIM, IF, NCC)\r\n\r\nThe signature insertion generate a \"key file\", which is needed for the detection.\r\n\r\n## Android Application\r\n\r\nThe Android application uses the QimWatermaking native library (through JNI) to enable marking and integrity checking of images.\r\n\r\nTechnical challenges (as part of Télécom SudParis HighTech Imaging major):\r\n\r\n- use a native library in Android (Write once...)\r\n- demonstrate and evaluate performances of the library on lightweight devices\r\n- give access to the library features _via_ an easy and confortable user experience\r\n\r\nFeatures: \r\n\r\n- mark an image loaded from the Image Library\r\n- mark an image taken with the camera\r\n- share the marked image and the key file\r\n- check the integrity given an image loaded from the Image Library and a key file loaded from the device's storage\r\n  - it gives an \"integrity score\" between 0.0 and 1.0\r\n  - a score over 0.9 assert that the content has not been modifies\r\n  - a score under 0.7 asser that the integrity has been broken\r\n  - intermediate scores depend on image and attacks on content / format.\r\n  \r\nScreenshots:\r\n\r\n![Application check integrity screen](Images/AppCheck.png \"check integrity screen\")\r\n![Application mark integrity screen](Images/AppMark.png \"mark integrity screen\")\r\n![Application logo](QimNavigationApp/res/drawable-mdpi/frame_grey_transp.png \"Application logo\")\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}